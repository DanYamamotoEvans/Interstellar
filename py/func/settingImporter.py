import configparser
import json
from argparse import ArgumentParser
import regex
import gzip
import collections
import csv
from distutils.util import strtobool

def readconfig(input_cfg):
    cfg=configparser.ConfigParser()
    cfg.optionxform = str
    cfg.read(input_cfg)
    return cfg

def get_command():
    argparser = ArgumentParser()
    argparser.add_argument('-v', '--version', action='version', version="barista version 2020.04.19")
    argparser.add_argument('-cmd', '--command', type=str,required=True,choices=["import","QC","to_bt","correct","from_bt","mk_sval","buildTree","globalConvert","mergeTree","convert","localConvert","reindex","bc_sort","export","demultiplex","tag"],help="##Required## command type, [import,correct,mk_sval,globalConvert,mergeTree,localConvert,export]")
    argparser.add_argument('-conf', '--config', type=str,default="",help="##Required## config file")
    argparser.add_argument('-R1', '--read1', type=str,default="",help='R1 file')
    argparser.add_argument('-R2', '--read2', type=str,default="",help='R2 file')
    argparser.add_argument('-I1', '--index1', type=str,default="",help='I1 file')
    argparser.add_argument('-I2', '--index2', type=str,default="",help='I2 file')
    argparser.add_argument('-o', '--outname', type=str,default="barista",help='output file name')
    argparser.add_argument('-d', '--outdir', type=str, default=".", help='output directory')
    argparser.add_argument('-ip', '--pickle', type=str,default="", nargs="*", help='##Required for pileup, correct and export## import pickle')
    argparser.add_argument('-rs', '--rawSeq', type=str,default="",nargs="*",help="##Required for correct and export## gzipped sequence file generated by import")
    argparser.add_argument('-rq', '--rawQual', type=str,default="",help="##Required for correct and export## gzipped quality file generated by import")
    argparser.add_argument('-sv', '--srcValue', type=str, required="", help='##Required for globalConvert and localConvert## source sequence value file generated by correct')
    argparser.add_argument('-sq', '--srcQuality', type=str, required="", help='##Required for globalConvert and localConvert## source quality file generated by correct')
    argparser.add_argument('-ref', '--reference', type=str, required="", help='##Required for globalConvert and localConvert## source reference file generated by correct')
    argparser.add_argument('-pup', '--pileupPkl', type=str,default="",help='pickle file of the count dictionary generated by pileup')
    argparser.add_argument('-l', '--localComponents', type=str, default="", help='##Required for localConvert## destination component(s) for localConvert')
    argparser.add_argument('-crp', '--correctedPickle', type=str,default="",help='pickle file generated by correct')
    argparser.add_argument('-yscale', '--yaxis_scale', type=str,default="",help='yaxis scale for plot')
    argparser.add_argument('-no_show_summary', '--no_show_summary', action="store_true",help='show summary on the plot')
    # argparser.add_argument('-cvp', '--convertedPkl', type=str, default="", help='##Required for localConvert and export## pickle file of partially converted components')
    # argparser.add_argument('-cv', '--convertedValue', type=str, default="", help='##Required for localConvert and export## pickle file of partially converted components')
    argparser.add_argument('-tree', '--tree', type=str, default="", help='s-value tree generated in mergeTree')
    argparser.add_argument('-dv', '--destValue', type=str, default="", nargs='*', help='##Required for localConvert and export## pickle file of partially converted components')
    argparser.add_argument('-dq', '--destQual', type=str, default="", help='##Required for localConvert and export## pickle file of partially converted components')   
    argparser.add_argument('-lp', '--localTreePkl', type=str, default="",nargs='*', help='##Required for mergeTree## pickle file of local convert tree')
    argparser.add_argument('-mp', '--mergeTreePkl', type=str, default="", help='##Required for localConvert## pickle file of merged tree')
    argparser.add_argument('-cs', '--correctedSeq', type=str,help="gzipped sequence file generated by import")
    argparser.add_argument('-cq', '--correctedQual', type=str,help="gzipped sequence file generated by import")
    argparser.add_argument('-size', '--size_info', type=str,default="",help="capacity information generated by mergeTree")
    argparser.add_argument('-resultonly', '--resultonly', action="store_true", help='export only result file (no value files)')
    argparser.add_argument('-fq_gz', '--input_fastq_gzipped', action="store_true", help='Fastq is gzipped')
    argparser.add_argument('-reidx', '--reindex', type=str,required="",help="pickle file by reindex")
    argparser.add_argument('-c', '--destComponent', type=str,required="",help="global destination component name used in globalConvert")
    argparser.add_argument('-sseq_to_svalue', '--sseq_to_svalue', type=str,required="",help="The dictionary of seq to value generagted by 'mk_sval'")
    argparser.add_argument('-tbl', '--table', type=str,required="",help="tsv file including the correspondence of source and destination")
    argparser.add_argument('-correspond_bc', '--correspond_bc', type=str, default="", help='dest component that needs barcode correspondence')
    argparser.add_argument('-simple', '--simple', action="store_true", help='Read strucutre is described as non-regular expression format')
    argparser.add_argument('-flash', '--flash',type=str, default="",help='If the paired end reads have overlap, specified reads are merged using flash2 algorithm. exp) R1,R2')
    argparser.add_argument('-export_bclist', '--export_bclist', action="store_true", help='export the converted barcodes')
    argparser.add_argument('-export_tsv', '--export_tsv', action="store_true", help='export sequence table, not fastq(for demultiplex)')
    argparser.add_argument('-samplemerge', '--samplemerge', action="store_true", help='merge multiple samples or not')
    argparser.add_argument('-samplesheet', '--samplesheet', type=str, default="",help='samplesheet if samplemerge==True')
    return argparser.parse_args()

def get_option_import():
    argparser = ArgumentParser()
    argparser.add_argument('-cmd', '--command', type=str,required=True,choices=["import","correct","mk_sval","globalConvert","mergeTree","localConvert","reindex","export","demultiplex","tag"],help="##Required## command type, [import,correct,mk_sval,globalConvert,mergeTree,localConvert,export]")
    argparser.add_argument('-conf', '--config', type=str,required=True,help="config file")
    argparser.add_argument('-R1', '--read1', type=str,default="",help='R1 file')
    argparser.add_argument('-R2', '--read2', type=str,default="",help='R2 file')
    argparser.add_argument('-I1', '--index1', type=str,default="",help='I1 file')
    argparser.add_argument('-I2', '--index2', type=str,default="",help='I2 file')
    argparser.add_argument('-o', '--outname', type=str,default="barista",help='output file name')
    argparser.add_argument('-d', '--outdir', type=str, default=".", help='output directory')
    argparser.add_argument('-fq_gz', '--input_fastq_gzipped', action="store_true", help='Fastq is gzipped')
    argparser.add_argument('-simple', '--simple', action="store_true", help='Read strucutre is described as non-regular expression format')
    argparser.add_argument('-flash', '--flash',type=str, default="", choices=["","R1,R2","R1,I1","R1,I2","R2,I1","R2,I2","I1,I2"],help='If the paired end reads have overlap, specified reads are merged using flash2 algorithm. exp) R1,R2')
    # argparser.add_argument('-w', '--workdir', type=str,default=".",help='working directory')
    # argparser.add_argument('-ip', '--pickle', type=str,default="", nargs="*", help='import pickle')
    # argparser.add_argument('-if', '--file', type=str, default="", help='import file')
    # argparser.add_argument('-l', '--localComponents', type=str, default="", help='destination component(s) for localConvert')
    # argparser.add_argument('-crp', '--correctedSrcPkl', type=str, default="", help='pickle file of corrected components')
    # argparser.add_argument('-cvp', '--convertedPkl', type=str, default="", help='pickle file of partially converted components')
    # argparser.add_argument('-lp', '--localTreePkl', type=str, default="",nargs='*', help='pickle file of local convert tree')
    # argparser.add_argument('-mp', '--mergeTreePkl', type=str, default="", help='pickle file of merged tree')
    return argparser.parse_args()

def get_option_qc():
    argparser = ArgumentParser()
    argparser.add_argument('-cmd', '--command', type=str,required=True,choices=["import","QC","correct","mk_sval","globalConvert","mergeTree","localConvert","reindex","export","demultiplex","tag"],help="##Required## command type, [import,correct,mk_sval,globalConvert,mergeTree,localConvert,export]")
    argparser.add_argument('-conf', '--config', type=str,required=True,help="config file")
    argparser.add_argument('-rs', '--rawSeq', type=str,required=True,help="gzipped sequence file generated by import")
    argparser.add_argument('-rq', '--rawQual', type=str,required=True,help="gzipped quality file generated by import")
    argparser.add_argument('-o', '--outname', type=str,default="barista",help='output file name')
    argparser.add_argument('-d', '--outdir', type=str, default=".", help='output directory')
    return argparser.parse_args()

def get_option_to_bt():
    argparser = ArgumentParser()
    argparser.add_argument('-cmd', '--command', type=str,required=True,choices=["import","QC","to_bt","correct","mk_sval","globalConvert","mergeTree","localConvert","reindex","export","demultiplex","tag"],help="##Required## command type, [import,correct,mk_sval,globalConvert,mergeTree,localConvert,export]")
    argparser.add_argument('-conf', '--config', type=str,required=True,help="config file")
    argparser.add_argument('-rs', '--rawSeq', type=str,required=True,nargs="*",help="gzipped sequence file generated by import or QC")
    argparser.add_argument('-o', '--outname', type=str,default="barista",help='output file name')
    argparser.add_argument('-d', '--outdir', type=str, default=".", help='output directory')
    return argparser.parse_args()

def get_option_correct():
    argparser = ArgumentParser()
    argparser.add_argument('-cmd', '--command', type=str,required=True,choices=["import","correct","mk_sval","globalConvert","mergeTree","localConvert","reindex","export","demultiplex","tag"],help="##Required## command type, [import,correct,mk_sval,globalConvert,mergeTree,localConvert,export]")
    argparser.add_argument('-conf', '--config', type=str,required=True,help="config file")
    argparser.add_argument('-ip', '--pickle', type=str,required=True,nargs="*", help='import pickle')
    argparser.add_argument('-no_show_summary', '--no_show_summary', action="store_true",help='show summary on the plot')
    argparser.add_argument('-yscale', '--yaxis_scale', type=str,default="log",choices=["normal","log"],help='yaxis scale for plot')
    argparser.add_argument('-o', '--outname', type=str,default="barista",help='output file name')
    argparser.add_argument('-d', '--outdir', type=str, default=".", help='output directory')
    return argparser.parse_args()

# def get_option_from_bt():
#     argparser = ArgumentParser()
#     argparser.add_argument('-cmd', '--command', type=str,required=True,choices=["import","correct","from_bt","mk_sval","globalConvert","mergeTree","localConvert","reindex","export","demultiplex","tag"],help="##Required## command type, [import,correct,mk_sval,globalConvert,mergeTree,localConvert,export]")
#     argparser.add_argument('-conf', '--config', type=str,required=True,help="config file")
#     argparser.add_argument('-crp', '--correctedPickle', type=str,default="",help='pickle file generated by correct')
#     argparser.add_argument('-o', '--outname', type=str,default="barista",help='output file name')
#     argparser.add_argument('-d', '--outdir', type=str, default=".", help='output directory')
#     return argparser.parse_args()

def get_option_mk_s():
    argparser = ArgumentParser()
    argparser.add_argument('-cmd', '--command', type=str,required=True,choices=["import","correct","mk_sval","globalConvert","mergeTree","localConvert","reindex","export","demultiplex","tag"],help="##Required## command type, [import,correct,mk_sval,globalConvert,mergeTree,localConvert,export]")
    argparser.add_argument('-conf', '--config', type=str,required=True,help="config file")
    #argparser.add_argument('-ip', '--pickle', type=str,required=True,nargs="*", help='import pickle')
    argparser.add_argument('-rs', '--rawSeq', type=str,required=True,help="gzipped sequence file generated by import")
    argparser.add_argument('-rq', '--rawQual', type=str,required=True,help="gzipped quality file generated by import")
    argparser.add_argument('-crp', '--correctedPickle', type=str,required=True,help='pickle file generated by correct')
    argparser.add_argument('-resultonly', '--resultonly', action="store_true", help='export only result file (no value files)')
    argparser.add_argument('-o', '--outname', type=str,default="barista",help='output file name')
    argparser.add_argument('-d', '--outdir', type=str, default=".", help='output directory')
    return argparser.parse_args()

def get_option_buildTree():
    argparser = ArgumentParser()
    argparser.add_argument('-cmd', '--command', type=str,required=True,choices=["import","correct","mk_sval","buildTree","globalConvert","mergeTree","localConvert","reindex","export","demultiplex","tag"],help="##Required## command type, [import,correct,mk_sval,globalConvert,mergeTree,localConvert,export]")
    argparser.add_argument('-conf', '--config', type=str,required=True,help="config file")
    argparser.add_argument('-sv', '--srcValue', type=str, required=True, help='source sequence value file generated by correct')
    # argparser.add_argument('-sq', '--srcQuality', type=str, required=True, help='source quality file generated by correct')
    argparser.add_argument('-samplemerge', '--samplemerge', action="store_true", help='merge multiple samples or not')
    argparser.add_argument('-samplesheet', '--samplesheet', type=str, default="",help='samplesheet if samplemerge==True')
    argparser.add_argument('-o', '--outname', type=str,default="barista",help='output file name')
    argparser.add_argument('-d', '--outdir', type=str, default=".", help='output directory')
    return argparser.parse_args()

def get_option_globalConvert():
    argparser = ArgumentParser()
    argparser.add_argument('-cmd', '--command', type=str,required=True,choices=["import","correct","mk_sval","globalConvert","mergeTree","localConvert","reindex","export","demultiplex","tag"],help="##Required## command type, [import,correct,mk_sval,globalConvert,mergeTree,localConvert,export]")
    argparser.add_argument('-conf', '--config', type=str,required=True,help="config file")
    argparser.add_argument('-sv', '--srcValue', type=str, required=True, help='source sequence value file generated by correct')
    argparser.add_argument('-sq', '--srcQuality', type=str, required=True, help='source quality file generated by correct')
    argparser.add_argument('-ref', '--reference', type=str, required=True, help='source reference file generated by correct')
    argparser.add_argument('-o', '--outname', type=str,default="barista",help='output file name')
    argparser.add_argument('-d', '--outdir', type=str, default=".", help='output directory')
    return argparser.parse_args()

def get_option_mergeTree():
    argparser = ArgumentParser()
    argparser.add_argument('-cmd', '--command', type=str,required=True,choices=["import","correct","mk_sval","globalConvert","mergeTree","localConvert","reindex","export","demultiplex","tag"],help="##Required## command type, [import,correct,mk_sval,globalConvert,mergeTree,localConvert,export]")
    argparser.add_argument('-conf', '--config', type=str,required=True,help="config file")
    argparser.add_argument('-lp', '--localTreePkl', type=str, required=True,nargs='*', help='pickle file of local convert tree')
    argparser.add_argument('-samplemerge', '--samplemerge', action="store_true", help='merge multiple samples or not')
    argparser.add_argument('-samplesheet', '--samplesheet', type=str, default="",help='samplesheet if samplemerge==True')
    argparser.add_argument('-o', '--outname', type=str,default="barista",help='output file name')
    argparser.add_argument('-d', '--outdir', type=str, default=".", help='output directory')
    return argparser.parse_args()

def get_option_convert():
    argparser = ArgumentParser()
    argparser.add_argument('-cmd', '--command', type=str,required=True,choices=["import","correct","mk_sval","globalConvert","mergeTree","convert","localConvert","reindex","export","demultiplex","tag"],help="##Required## command type, [import,correct,mk_sval,globalConvert,mergeTree,localConvert,export]")
    argparser.add_argument('-conf', '--config', type=str,required=True,help="config file")
    argparser.add_argument('-sv', '--srcValue', type=str, required=True, help='source sequence value file generated by correct')
    argparser.add_argument('-sq', '--srcQuality', type=str, required=True, help='source quality file generated by correct')
    argparser.add_argument('-samplemerge', '--samplemerge', action="store_true", help='merge multiple samples or not')
    argparser.add_argument('-samplesheet', '--samplesheet', type=str, default="",help='samplesheet if samplemerge==True')
    argparser.add_argument('-tree', '--tree', type=str, required=True, help='s-value tree generated in mergeTree')
    argparser.add_argument('-o', '--outname', type=str,default="barista",help='output file name')
    argparser.add_argument('-d', '--outdir', type=str, default=".", help='output directory')
    return argparser.parse_args()

def get_option_localConvert():
    argparser = ArgumentParser()
    argparser.add_argument('-cmd', '--command', type=str,required=True,choices=["import","correct","mk_sval","globalConvert","mergeTree","localConvert","reindex","export","demultiplex","tag"],help="##Required## command type, [import,correct,mk_sval,globalConvert,mergeTree,localConvert,export]")
    argparser.add_argument('-conf', '--config', type=str,required=True,help="config file")
    # argparser.add_argument('-crp', '--correctedSrcPkl', type=str, required=True, help='pickle file of corrected components')
    argparser.add_argument('-sv', '--srcValue', type=str, required=True, help='source sequence value file generated by correct')
    # argparser.add_argument('-sq', '--srcQuality', type=str, required=True, help='source quality file generated by correct')
    # argparser.add_argument('-cv', '--convertValue', type=str, required=True, help='pickle file of partially converted components')
    argparser.add_argument('-dv', '--destValue', type=str, default="", help='##Required for localConvert and export## pickle file of partially converted components')
    argparser.add_argument('-l', '--localComponents', type=str, default=True, help='destination component(s) for localConvert')
    argparser.add_argument('-mp', '--mergeTreePkl', type=str, required=True, help='pickle file of merged tree')
    argparser.add_argument('-o', '--outname', type=str,default="barista",help='output file name')
    argparser.add_argument('-d', '--outdir', type=str, default=".", help='output directory')
    return argparser.parse_args()

def get_option_reindex():
    argparser = ArgumentParser()
    argparser.add_argument('-cmd', '--command', type=str,required=True,choices=["import","correct","mk_sval","globalConvert","mergeTree","localConvert","reindex","export","demultiplex","tag"],help="##Required## command type, [import,correct,mk_sval,globalConvert,mergeTree,localConvert,export]")
    argparser.add_argument('-conf', '--config', type=str,required=True,help="config file")
    argparser.add_argument('-dv', '--destValue', type=str, required=True,nargs='*', help='destination values conversion completed')
    argparser.add_argument('-samplemerge', '--samplemerge', action="store_true", help='merge multiple samples or not')
    argparser.add_argument('-samplesheet', '--samplesheet', type=str, default="",help='samplesheet if samplemerge==True')
    argparser.add_argument('-o', '--outname', type=str,default="barista",help='output file name')
    argparser.add_argument('-d', '--outdir', type=str, default=".", help='output directory')
    return argparser.parse_args()

def get_option_bc_sort():
    argparser = ArgumentParser()
    argparser.add_argument('-cmd', '--command', type=str,required=True,choices=["import","correct","mk_sval","globalConvert","mergeTree","localConvert","bc_sort","reindex","export","demultiplex","tag"],help="##Required## command type, [import,correct,mk_sval,globalConvert,mergeTree,localConvert,export]")
    argparser.add_argument('-conf', '--config', type=str,default="",help="config file")
    # argparser.add_argument('-ref', '--reference', type=str, required=True, help='source reference file generated by correct')
    # argparser.add_argument('-reidx', '--reindex', type=str,required=True,help="pickle file by reindex")
    argparser.add_argument('-sseq_to_svalue', '--sseq_to_svalue', type=str,required=True,help="The dictionary of seq to value generagted by 'mk_sval'")
    argparser.add_argument('-tbl', '--table', type=str,required=True,help="tsv file including the correspondence of source and destination")
    argparser.add_argument('-tree', '--tree', type=str, required=True, help='s-value tree generated in mergeTree')
    # argparser.add_argument('-c', '--destComponent', type=str,required=True,help="global destination component name used in globalConvert")
    argparser.add_argument('-o', '--outname', type=str,default="barista",help='output file name')
    argparser.add_argument('-d', '--outdir', type=str, default=".", help='output directory')
    return argparser.parse_args()


def get_option_export():
    argparser=ArgumentParser()
    argparser.add_argument('-cmd', '--command', type=str,required=True,choices=["import","correct","mk_sval","globalConvert","mergeTree","localConvert","reindex","export","demultiplex","tag"],help="##Required## command type, [import,correct,mk_sval,globalConvert,mergeTree,localConvert,export]")
    argparser.add_argument('-conf', '--config', type=str,required=True,help="config file")
    # argparser.add_argument('-cvp', '--convertedPkl', type=str, required=True, help='pickle file of partially converted components')
    argparser.add_argument('-dv', '--destValue', type=str, default="", help='##Required for localConvert and export## pickle file of partially converted components')
    argparser.add_argument('-dq', '--destQual', type=str, default="", help='##Required for localConvert and export## pickle file of partially converted components')
    argparser.add_argument('-rs', '--rawSeq', type=str,required=True,help="gzipped sequence file generated by import")
    argparser.add_argument('-rq', '--rawQual', type=str,required=True,help="gzipped quality file generated by import")
    argparser.add_argument('-size', '--size_info', type=str,required=True,help="capacity information generated by mergeTree")
    # argparser.add_argument('-reidx', '--reindex', type=str,required=True,help="pickle file by reindex")
    argparser.add_argument('-export_bclist', '--export_bclist', action="store_true", help='export the converted barcodes')
    argparser.add_argument('-o', '--outname', type=str,default="barista",help='output file name')
    argparser.add_argument('-d', '--outdir', type=str, default=".", help='output directory')
    return argparser.parse_args()

def get_option_demulti_tag():
    argparser=ArgumentParser()
    argparser.add_argument('-cmd', '--command', type=str,required=True,choices=["import","correct","mk_sval","globalConvert","mergeTree","localConvert","reindex","export","demultiplex","tag"],help="##Required## command type, [import,correct,mk_sval,globalConvert,mergeTree,localConvert,export]")
    argparser.add_argument('-conf', '--config', type=str,required=True,help="config file")
    # argparser.add_argument('-cvp', '--convertedPkl', type=str, required=True, help='pickle file of partially converted components')
    argparser.add_argument('-cs', '--correctedSeq', type=str,required=True,help="gzipped sequence file generated by import")
    argparser.add_argument('-rq', '--rawQual', type=str,required=True,help="gzipped quality file generated by import")
    argparser.add_argument('-cq', '--correctedQual', type=str,required=True,help="gzipped sequence file generated by import")
    argparser.add_argument('-o', '--outname', type=str,default="barista",help='output file name')
    argparser.add_argument('-d', '--outdir', type=str, default=".", help='output directory')
    argparser.add_argument('-export_tsv', '--export_tsv', action="store_true", help='export sequence table, not fastq(for demultiplex)')
    return argparser.parse_args()

def configClean(cfgDict):
    new_cfgDict={}
    for key in cfgDict:
        new_cfgDict[key]=regex.sub("\\t|\\n| ","",cfgDict[key])
    return new_cfgDict

# def csv_reader(file, header=False):
#   with open(file, "r") as f:
#   	reader = csv.reader(f)
	
# 	if header:
# 		next(reader)

# 	for row in reader:
# 		yield row

def getImportSeqFromFiles(file_seq_gz,file_qual_gz):
    seq={}
    qual={}
    with gzip.open(file_seq_gz,mode="rt") as seqf:
        for rownum,l_seq in enumerate(seqf):
            l_seq=regex.sub("\n","",l_seq)
            l_seq_split=l_seq.split("\t")
            if rownum==0:
                fileheader=l_seq_split
            else:
                for colnum,component in enumerate(l_seq_split):
                    if colnum==0:
                        seq[component]={}
                        fastqHeader_now=component
                    seq[fastqHeader_now][fileheader[colnum]]=component
    with gzip.open(file_qual_gz,mode="rt") as qualf:
        for rownum,l_qual in enumerate(qualf):
            l_qual=regex.sub("\n","",l_qual)
            l_qual_split=l_qual.split("\t")
            if rownum==0:
                fileheader=l_qual_split
            else:
                for colnum,component in enumerate(l_qual_split):
                    if colnum==0:
                        qual[component]={}
                        fastqHeader_now=component
                    qual[fastqHeader_now][fileheader[colnum]]=component
    importSeq=dict(seq=seq,qual=qual)
    return importSeq

def seqYielder(file_seq_gz):
    with gzip.open(file_seq_gz,mode="rt") as seqf:
        for i in seqf:
            yield i




def getCorrectedSrc(index,quality,reference=""):
    with gzip.open(index,mode="rt") as f:
        correctedIndexDict=collections.defaultdict(list)
        for rownum,l in enumerate(f):
            l=regex.sub("\n","",l)
            l_split=l.split("\t")
            if rownum==0:
                header=l_split
            else:
                for colnum,component in enumerate(l_split):
                    correctedIndexDict[header[colnum]].append(component)
    with gzip.open(quality,mode="rt") as f:
        qualityDict=collections.defaultdict(list)
        for rownum,l in enumerate(f):
            l=regex.sub("\n","",l)
            l_split=l.split("\t")
            if rownum==0:
                header=l_split
            else:
                for colnum,component in enumerate(l_split):
                    if colnum==0:
                        qualityDict[header[colnum]].append(component)
                    else:
                        qualityDict[header[colnum]].append(int(component))
    if reference:
        with gzip.open(reference,mode="rt") as f:
            references=collections.defaultdict(list)
            for l in f:
                l=regex.sub("\n","",l)
                l_split_tab=l.split("\t")
                l_split_comma=l_split_tab[1].split(",")
                references[l_split_tab[0]]=l_split_comma
    else:
        references=""
    correctedSrc=dict(correctedIndexDict=correctedIndexDict,qualityDict=qualityDict,references=references)
    return correctedSrc


def correctOptionParse(correctOption):
    correctOptDict=dict()
    m=regex.search(r"^[^\(]+\((?P<option>[^\)]*)\)",correctOption)
    correctOpt=m.groupdict()["option"]
    correctOptSplit=correctOpt.split(",")
    if regex.search(r"^correct",correctOption):
        correctOptDict["method"]="correct" 
    elif regex.search(r"^equal",correctOption):
        correctOptDict["method"]="equal"
    elif regex.search(r"^from_bt",correctOption):
        correctOptDict["method"]="from_bt"

    if regex.search(r"^correct|^equal|^from_bt",correctOption):
        for eachOpt in correctOptSplit:
            if "maxDist" in eachOpt.split(":")[0] or "seed_min" in eachOpt.split(":")[0]:
                correctOptDict[eachOpt.split(":")[0]]=int(eachOpt.split(":")[1])    
            elif "analyzed_portion" in eachOpt.split(":")[0]:
                correctOptDict[eachOpt.split(":")[0]]=float(eachOpt.split(":")[1])
            else:
                correctOptDict[eachOpt.split(":")[0]]=eachOpt.split(":")[1]  
        if not correctOptDict.get("analyzed_portion"):
            correctOptDict["analyzed_portion"]=1
        if not correctOptDict.get("rank_threshold"):
            correctOptDict["rank_threshold"]=""
    elif regex.search(r"^combination",correctOption):
        correctOptDict["method"]="combination"
        correctOptDict["combinatorialComponents"]=correctOptSplit    
    return correctOptDict

def convertOptionParse(convertOption):
    convertOptDict=dict()
    m=regex.search(r"^[^\(]+\((?P<option>[^\)]*)\)",convertOption)
    convertOpt=m.groupdict()["option"]
    convertOptSplit=convertOpt.split(",")
    convertOptDict={}
    if regex.search(r"^globalConvert",convertOption):
        convertOptDict["type"]="globalConvert" 
    elif regex.search(r"^localConvert",convertOption):
        convertOptDict["type"]="localConvert"

    for eachOpt in convertOptSplit:
        eachOptSplit=eachOpt.split(":")
        convertOptDict[eachOptSplit[0]]=eachOptSplit[1] 
        # if eachOptSplit[0]=="constraint":
        #     convertOptDict[eachOptSplit[0]]=eachOptSplit[1].split("+")
        if eachOptSplit[0]=="is_combination":
            convertOptDict[eachOptSplit[0]]=strtobool(eachOptSplit[1])
    
    return convertOptDict

def exportOptionParse(exportOption):
    exportOptDict=dict()
    m=regex.search(r"^[^\(]+\((?P<option>[^\)]*)\)",exportOption)
    exportOpt=m.groupdict()["option"]
    exportOptSplit=exportOpt.split(",")
    exportOptDict={}
    if regex.search(r"^equalExport",exportOption):
        exportOptDict["type"]="equalExport" 
    elif regex.search(r"^whitelistExport",exportOption):
        exportOptDict["type"]="whitelistExport"
    elif regex.search(r"^randomExport",exportOption):
        exportOptDict["type"]="randomExport"
    elif regex.search(r"^constantExport",exportOption):
        exportOptDict["type"]="constantExport"

    for eachOpt in exportOptSplit:
        if ("length" in eachOpt.split(":")[0] or "baseQuality" in eachOpt.split(":")[0]) and eachOpt.split(":")[1]:
            exportOptDict[eachOpt.split(":")[0]]=int(eachOpt.split(":")[1])
        elif eachOpt.split(":")[0]=="is_sorted":
            exportOptDict[eachOpt.split(":")[0]]=strtobool(eachOpt.split(":")[1])
        else:
            exportOptDict[eachOpt.split(":")[0]]=eachOpt.split(":")[1]    
    return exportOptDict

