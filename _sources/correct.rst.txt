.. _header-n0:

Correct
=======

The imported data is corrected by this step. This correction step
contains 2 commands, ``correct`` and ``mk_sval``. ``correct`` command
piles up all the srcCount.pkl.gz files generated by multiple computing
nodes in import(link!) step, and correct the barcode sequences with
specified parameters. Then, ``mk_sval`` command assign the corrected
barcode to the corresponding components.

.. _header-n56:

Setting file
------------

Same setting file can be used for both ``correct`` and ``mk_sval``.

.. code:: 

   [correct]
   src_corrected_components=cellID1,constant,UMI,cellID2,biological
   cellID1   = correct(src_raw_components:segment1,
                       rank_threshold:400,
                       maxDist_with_majority:1,
                       analyzed_portion:1.00,
                       maxDist_with_whitelist:2,
                       whitelist:/path/to/sci-RNA-seq3_HP_whitelist.txt)
   cellID2   = correct(src_raw_components:segment4,
                       rank_threshold:400,
                       maxDist_with_majority:1,
                       analyzed_portion:1.00,
                       maxDist_with_whitelist:2,
                       whitelist:/path/to/sci-RNA-seq3_RT_whitelist.txt)
   constant  = equal(src_raw_components:segment2)
   biological= equal(src_raw_components:segment5)
   UMI       = equal(src_raw_components:segment3)

.. _header-n58:

Description
~~~~~~~~~~~

-  src\_corrected\_components **(Required)**

   The name of each component used in this ``correct`` step. These
   component names correspond to the names which are used in ``import``.

-  cellID1=, cellID2=, ... **(Required)**

   Here, how the component in ``import`` step is passed to the
   corresponding component is described. There can be selected from 2
   kind of function, correct() and equal(). correct() performs barcode
   correction with given parameters (see below) and equal() directly
   passes the sequence to the component set in this step. In this case,
   segment2, 3 and 5 are directory passed to constant, biological and
   UMI with no correction, and segment1 and 4 are corrected with the
   sepecified parameters.

   **Note:** *barsita* adopts 2-step correction, minority correction and
   whitelist correction (if whitelist available). Minority correction is
   based on an assumption that the true barcodes are more detected than
   the erroneous barcodes. Therefore, the minority barcode pool are
   compared with the majority pool and corrected to the most feasible
   barcode with a given Levenstein distance. For this minority
   correction, the correct() parameter 'rank\_threshold',
   'maxDist\_with\_majority', and 'analyzed\_portion' are used. If the
   sequencing platform provides pre-defined barcode sequence list called
   'whitelist', the majority barcodes are also compared with the
   corresponding whitelist at the 2nd step using the paratmeter
   'maxDist\_with\_whitelist' and 'whitelist'.

   **Parameters for correct()**

   -  src\_raw\_components **(Required)**

      The name of corresponding component used in import step.

   -  rank\_threshold

      Number of barcodes which is reagarded as the majority. Numeric
      value, 'auto' or 'all' can be selected. When 'auto', the threshold
      value is automatically defined using
      `kneed <https://github.com/arvkevi/kneed>`__ algorithm. If you
      don't use minority correction and use all extracted barcode for
      the next whitelist correction, set 'all'. Default: auto

   -  maxDist\_with\_majority

      The maximum Levenstein distance for minority correction.

   -  analyzed\_portion

      The proportion of reads to be used for the downstream analysis. If
      set to 0.95, row count barcodes are discarded until the cumulative
      count achieves 5% of total reads.

   -  maxDist\_with\_whitelist

      The maximum Levenstein distance for whitelist correction.

   -  whitelist **(Required for whitelist correction)**

      Path to whitelist. Note: '~(tilde)' cannot be expanded. Set
      relative path or absolute path.

.. _header-n4:

correct
-------

.. _header-n8:

Usage
~~~~~

.. code:: shell

   barista \
   -cmd correct \
   -conf config.conf \
   -ip barista_import_srcCount.pkl.gz \
   -d output_directory \
   -o output_filename

+--------+----------+------------------------------------------------------------+
| Option | Required | Description                                                |
+========+==========+============================================================+
| -cmd   | ○        | *barista* command(correct)                                 |
+--------+----------+------------------------------------------------------------+
| -conf  | ○        | Setting file. See above how to write the config file.      |
+--------+----------+------------------------------------------------------------+
| -ip    | ○        | count file (srcCount.pkl.gz) generated by ``import`` step. |
+--------+----------+------------------------------------------------------------+
| -d     | ×        | Output directory.                                          |
+--------+----------+------------------------------------------------------------+
| -o     | ×        | Output file name.                                          |
+--------+----------+------------------------------------------------------------+

``correct`` merges the count files generated by ``import`` and correct
the barcode sequence using 2-step method described above. As a result,
image file which show the count of each barcode sequence, majority
threshold and correction summary (.png), sequences of each barcode
(srcReference.tsv.gz) and binary file of correction result
(srcCorrect.pkl.gz).

.. _header-n448:

Note
~~~~

.. _header-n451:

Merging ``import`` result performed by multiple computational nodes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To specify multiple multiple count files generated by multiple
computational nodes, use \* (wild card). For example,

.. code:: shell

   barista \
   -cmd correct \
   -conf config.conf \
   -ip /path/to/import/*_srcCount.pkl.gz \
   -d output_directory \
   -o output_filename

If you want to use the wild card for shell script argument, the wild
card will be successfully expanded by surrounding the argument with '"'.

.. _header-n460:

Computational time and memory consumption
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Computational time and memory consumption depend on the size of input
file size and sequence complexity of input barcodes. For huge sequencing
data set, large memory might be needed (not tested).

.. _header-n465:

mk_sval
-------

.. _header-n496:

Usage
~~~~~

.. code:: shell

   barista \
   -cmd mk_sval \
   -conf config.conf \
   -crp barista_correct_srcCorrect.pkl.gz \
   -rs barista_import_srcSeq.tsv.gz \
   -rq barista_import_srcQual.tsv.gz \
   -d output_directory \
   -o output_filename

+-----------------------+-----------------------+-----------------------+
| Option                | Required              | Description           |
+=======================+=======================+=======================+
| -cmd                  | ○                     | *barista*             |
|                       |                       | command(mk_sval)      |
+-----------------------+-----------------------+-----------------------+
| -conf                 | ○                     | Setting file. See     |
|                       |                       | above how to write    |
|                       |                       | the config file.      |
+-----------------------+-----------------------+-----------------------+
| -crp                  | ○                     | correction result     |
|                       |                       | file                  |
|                       |                       | (srcCorrect.pkl.gz)   |
|                       |                       | generated by          |
|                       |                       | ``correct`` step.     |
+-----------------------+-----------------------+-----------------------+
| -rs                   | ○                     | sequence file         |
|                       |                       | generated by          |
|                       |                       | ``import`` command.   |
+-----------------------+-----------------------+-----------------------+
| -rq                   | ○                     | quality file          |
|                       |                       | generated by          |
|                       |                       | ``import`` command.   |
+-----------------------+-----------------------+-----------------------+
| -d                    | ×                     | Output directory.     |
+-----------------------+-----------------------+-----------------------+
| -o                    | ×                     | Output file name.     |
+-----------------------+-----------------------+-----------------------+

``mk_sval`` generates 3 files, result.tsv.gz, srcValue.tsv.gz and
srcQual.tsv.gz. The 'result' file contains nucleotide sequences of each
component extracted by ``import`` and corrected sequence computed by
``correct``. The 'value' file contains the integer data for each barcode
sequence which means the index in barcode sequences list. The 'qual'
file contains average sequence quality of each barcode sequence.

.. _header-n563:

Note
~~~~

.. _header-n566:

Computational time and memory consumption
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Computational time linearly depends on the size of input files. Memory
consumption depends on the sequence length. Basically, it requires 2~5GB
memory for 4million reads processing. For 4 million reads, ``mk_sval``
for sciRNA-seq3 required about 6 mins and 1GB memory.
