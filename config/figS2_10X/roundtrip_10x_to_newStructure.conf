[general]
# Working directory
PROJECT_DIR= /path/to/10x_to_new_roundtrip/

# Path to template shellscript that
SET_SHELL_ENV= /path/to/set_shell_env

SAMPLESHEET=/path/to/samplesheet

[value_extraction]
# Input file path
READ1_PATH=/path/to/R1
READ2_PATH=/path/to/R2
INDEX1_PATH=/path/to/I1
INDEX2_PATH=/path/to/I2

# Read structure patterns by regular expression
READ1_STRUCTURE=^(?P<raw_cb>.{16})(?P<raw_umi>.{12})$
READ2_STRUCTURE=^(?P<raw_bio>.*)$
INDEX1_STRUCTURE=^(?P<raw_pbc1>.{15})$
INDEX2_STRUCTURE=^(?P<raw_pbc2>.{10})$

# Parental-local variable allocations
raw_umi =CHILD_OF(raw_cb)
raw_cb  =CHILD_OF(raw_pbc2)
raw_pbc2=CHILD_OF(raw_pbc1)

# Sequence filtering and correction for each segment
segment1.filtered.corrected.value =M2A_CORRECTION(source:raw_cb,levenshtein_distance:1,path:/path/to/10x_3M-february-2018.txt) >>  SEQ2VALUE()
segment3.filtered.value =SEQ2VALUE(source:raw_umi)

[value_translation]
#Value to destination sequence conversion
ex_bio=raw_bio
b1_1,b1_2,b1_3 = VALUE2SEQ(source:raw_pbc1, randseq_pattern:NN,NN,NN)
b2_1,b2_2,b2_3,b2_4 = VALUE2SEQ(source:raw_pbc2, randseq_pattern:NN,NN,NN,NN)
cb1,cb2,cb3,cb4,cb5 = VALUE2SEQ(source:raw_cb, allowlist_path:/path/to/cb1.txt,/path/to/cb2.txt,/path/to/cb3.txt,/path/to/cb4.txt,/path/to/cb5.txt)
umi1,umi2,umi3,umi4,umi5 = VALUE2SEQ(source:raw_umi, randseq_pattern:NN,NN,NN,NN,NN)

#Read structure configuration
READ1_STRUCTURE=dest_segment1+dest_segment2
READ2_STRUCTURE=dest_segment3

INDEX1_STRUCTURE=b2_2+b2_3+b2_4+b1_1+b1_2+b1_3+"TCTC"
INDEX2_STRUCTURE=b2_1+ex_bio
READ1_STRUCTURE =umi1+umi2+umi3+umi4+"ATAT"+umi5
READ2_STRUCTURE =cb1+cb2+"CCCC"+cb3+cb4+cb5
