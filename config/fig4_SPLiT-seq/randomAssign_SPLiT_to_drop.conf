[general]
# Working directory
PROJECT_DIR= /path/to/SPLiT_10x_keep/

# Path to template shellscript that
SET_SHELL_ENV= /path/to/set_shell_env

SAMPLESHEET=/path/to/samplesheet

[value_extraction]
# Input file path
READ1_PATH= ~/work/Interstellar_test/fastq/test//R1
READ2_PATH= ~/work/Interstellar_test/fastq/test//R2

# Read structure patterns by regular expression
READ1_STRUCTURE=^(?P<raw_bio>.*)$
READ2_STRUCTURE=^.*(?P<raw_umi>.{10})(?P<raw_cb3>.{8})(?P<raw_const1>GTGGCCGATGTTTCGCATCGGCGTACGACT){s<=2}(?P<raw_cb2>.{8})(?P<raw_const2>ATCCACGTGCTTGAGAGGCCAGAGCATTCG){s<=2}(?P<raw_cb1>.{8}).*$

# Parental-local variable allocations
raw_umi=CHILD_OF(raw_cb1,raw_cb2,raw_cb3)

# Sequence filtering and correction for each segment
s_cb1 =QUALITY_FILTER(source:raw_cb1, min_nucleotide_Q-score:5, min_avg_Q-score:20) >> M2A_CORRECTION(levenshtein_distance:1,path:/path/to/split.round1.txt) >>  SEQ2VALUE()
s_cb2 =QUALITY_FILTER(source:raw_cb2, min_nucleotide_Q-score:5, min_avg_Q-score:20) >> M2A_CORRECTION(levenshtein_distance:1,path:/path/to/split.round2.txt) >>  SEQ2VALUE()
s_cb3 =QUALITY_FILTER(source:raw_cb3, min_nucleotide_Q-score:5, min_avg_Q-score:20) >> M2A_CORRECTION(levenshtein_distance:1,path:/path/to/split.round3.txt) >>  SEQ2VALUE()
s_umi =QUALITY_FILTER(source:raw_umi, min_nucleotide_Q-score:5, min_avg_Q-score:20) >> SEQ2VALUE()
s_bio =QUALITY_FILTER(source:raw_bio, min_nucleotide_Q-score:5, min_avg_Q-score:20) 


[value_translation]
#Value to destination sequence conversion
dest_segment1=VALUE2SEQ(source:s_cb1,s_cb2,s_cb3, randseq_pattern:NNNNNNNNNNNN)
dest_segment2=VALUE2SEQ(source:s_umi,randseq_pattern:NNNNNNNN)
dest_segment3=s_bio

#Read structure configuration
READ1_STRUCTURE=dest_segment1+dest_segment2
READ2_STRUCTURE=dest_segment3


