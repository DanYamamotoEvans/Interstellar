[general]
# Working directory
PROJECT_DIR=/path/to/project_dir

# Path to template shellscript
SET_SHELL_ENV =/path/to/template.sh

# TSV file to indicate the sample correspondence if the input datasets consist of multiple samples
SAMPLESHEET=/path/to/example-dataset/test3/samplesheet.tsv



[value_extraction]
# Input file path
READ1_DIR=/path/to/Interstellar/example-dataset/test3/R1
READ2_DIR=/path/to/Interstellar/example-dataset/test3/R2

# Read structure patterns by regular expression
READ1_STRUCTURE=^(?P<src_segment1>.{14})(?P<src_segment2>.{8}).*$
READ2_STRUCTURE=^(?P<src_segment3>.*)$

# Parental-local value allocations
src_segment2=CHILD_OF(src_segment1)

# Sequence filtering and correction for each segment
segment1.filtered.corrected.value =QUALITY_FILTER(source:segment1, min_nucleotide_Q-score:5, min_avg_Q-score:20) >> WHITELIST_CORRECT(levenshtein_distance:1,path:/path/to/Interstellar/example-dataset/whitelists/CellBarcode_QuartzSeq2_v31.txt) >>  SEQ2VALUE()
segment2.filtered.value=QUALITY_FILTER(source:src_segment2, min_nucleotide_Q-score:5, min_avg_Q-score:20) >>  SEQ2VALUE()
segment3.filtered=QUALITY_FILTER(source:src_segment3, min_nucleotide_Q-score:5, min_avg_Q-score:20)



[value_translation]
#Value to destination sequence conversion
dest_segment1,dest_segment2,dest_segment3=VALUE2SEQ(source: segment1.filtered.corrected.value, whitelist_path:/path/to/Interstellar/example-dataset/whitelists/split.round1.txt,/path/to/Interstellar/example-dataset/whitelists/split.round2.txt,/path/to/Interstellar/example-dataset/whitelists/split.round3.txt)
dest_segment4=VALUE2SEQ(source: segment2.filtered.value, randseq_length:10)
dest_segment5=segment3.filtered
dest_segment6="GTGGCCGATGTTTCGCATCGGCGTACGACT"
dest_segment7="ATCCACGTGCTTGAGAGGCCAGAGCATTCG"

#Read structure configuration
READ1_STRUCTURE=dest_segment4+dest_segment3+dest_segment6+dest_segment2+dest_segment7+dest_segment1
READ2_STRUCTURE=dest_segment5


