[general]
# Working directory
PROJECT_DIR=/path/to/project_dir
 
# Path to template shellscript that
SET_SHELL_ENV=/path/to/set_shell_env

SAMPLESHEET=/path/to/example-dataset/Example3/samplesheet.tsv

[value_extraction]
# Input file path
READ1_PATH=/path/to/Interstellar/example-dataset/Example1/R1
READ2_PATH=/path/to/Interstellar/example-dataset/Example1/R2
 
# Read structure patterns by regular expression
READ1_STRUCTURE=^(?P<src_segment1>.{12})(?P<src_segment2>.{8}).*$
READ2_STRUCTURE=^(?P<src_segment3>.*)$
 
# Parental-local variable allocations
src_segment2=CHILD_OF(src_segment1)
 
# Sequence quality filtration
segment1.filtered = QUALITY_FILTER(source: src_segment1, min_nucleotide_Q-score:5, min_avg_Q-score:20)
segment2.filtered = QUALITY_FILTER(source: src_segment2, min_nucleotide_Q-score:5, min_avg_Q-score:20)
segment3.filtered = QUALITY_FILTER(source: src_segment3, min_nucleotide_Q-score:5, min_avg_Q-score:20)

# Knee correction for cell barcodes
segment1.filtered.kneed = I2M_CORRECTION(source:segment1.filtered, levenshtein_distance:1)

# Sequence to value conversion for cell barcodes and UMIs
segment1.value = SEQ2VALUE(source:segment1.filtered.kneed)
segment2.value = SEQ2VALUE(source:segment2.filtered)


[value_translation]
# Definition of destination segments
dest_segment1=VALUE2SEQ(source: segment1.value, allowlist_path:/path/to/3M-february-2018.txt)
dest_segment2=VALUE2SEQ(source: segment2.value, randseq_pattern:NNNNNNNNNNNN)
dest_segment3=segment3.filtered
 
# Read structure configuration
READ1_STRUCTURE=dest_segment1+dest_segment2
READ2_STRUCTURE=dest_segment3

