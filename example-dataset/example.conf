# s2v: sequence to value
#     In this section, the input FASTQ files are segmented, sequence segments 
#     are error-corrected and values are generated.
#     If you just want to obtain a value matrix or error-corrected seuence 
#     segment table, only having this section is fine.

[s2v]
segment=segment1*, segment2, segment3*, segment4*, segment5
Read1_src=^(?P<segment1>.{9,10})(?P<segment2>CAGAGC){s<=2}(?P<segment3>.{8})(?P<segment4>.{10}).*$
Read2_src=(?P<segment5>.*)
# Read1_src=<segment1:10><segment2:6><segment3:0>
# Read2_src=<segment4:0>
flash_min_overlap=20
flash_max_overlap=30
qc_targets=segment1,segment4,segment3
min_base_quality=5
min_avg_quality=20


[correct] #correct / equal
src_corrected_components=cellID1,constant,UMI,cellID2,biological
cellID1   = correct(src_raw_components:segment1,
                    rank_threshold:400,
                    maxDist_with_majority:1,
                    analyzed_portion:1.00,
                    maxDist_with_whitelist:2,
                    whitelist:example-dataset//sci-RNA-seq3_HP_purified_whitelist.txt)
cellID2   = correct(src_raw_components:segment4,
                    rank_threshold:400, 
                    maxDist_with_majority:1,
                    analyzed_portion:1.00,
                    maxDist_with_whitelist:2,
                    whitelist:example-dataset//sci-RNA-seq3_RT_purified_whitelist.txt)
constant  = equal(src_raw_components:segment2)
biological= equal(src_raw_components:segment5)
UMI       = equal(src_raw_components:segment3)

[convert]
dest_components=d_value_CellID,d_value_UMI

d_value_CellID    = globalConvert(src_corrected_components_1:cellID1,
                                   src_corrected_components_2:cellID2,
                                   is_combination:yes,
                                   combination_group:d_value_combined_CellID)
d_value_UMI       = localConvert(src_corrected_components:UMI,
                                  is_combination:no,
                                  constraint:d_value_CellID)

[export]
export_components = exBiological,exCellID,exUMI
exBiological=equalExport(src_raw_components:segment5,
                         length:,
                         add_nucleotide:A,
                         baseQuality:33)
exCellID=whitelistExport(d_val:d_value_CellID,
                          whitelist:../testout/3M-february-2018.txt)
exUMI=randomExport(d_val:d_value_UMI,
                   length:12)

Read1_dest=exCellID+exUMI
Read2_dest=exBiological

[demultiplex]
key=cellID1
Read1=cellID2+UMI
Read2=constant+biological

[tag]
tag_Read1=cellID1,cellID2
tag_Read2=cellID1,cellID2,UMI
Read1=UMI
Read2=constant+biological
Index1=
Index2=

[streamline]
pipeline=import,qc,correct,mk_sval,buildTree,mergeTree,convert,export
template_shellscript=/Users/yusukekijima/work/yachie/YUSUKE_KIJIMA.LAB/Experiments/Projects/testout/template_myenv.sh
qoption=-l s_vmem=<mem>G,mem_req=<mem>G
mem_max=
mem_import=
mem_qc=
mem_correct=
mem_mk_sval=
mem_buildTree=
mem_mergeTree=
mem_convert=
mem_export=
chunksize=2000000
